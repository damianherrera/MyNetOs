'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
'
Namespace SQLWebServiceProvider

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code"), _
	 System.Web.Services.WebServiceBindingAttribute(Name:="ServiceProviderSoap", [Namespace]:="http://www.civinext.com/"), _
	 System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject)), _
	 System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlClient.SqlParameter()))> _
	Partial Public Class ServiceProvider
		Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

		Private CloseIDBConnectionOperationCompleted As System.Threading.SendOrPostCallback

		Private ClearIDBConnectionOperationCompleted As System.Threading.SendOrPostCallback

		Private DisposeIDBConnectionOperationCompleted As System.Threading.SendOrPostCallback

		Private GetIDBConnectionKeyOperationCompleted As System.Threading.SendOrPostCallback

		Private GetSQLParametersOperationCompleted As System.Threading.SendOrPostCallback

		Private BeginTransaction0OperationCompleted As System.Threading.SendOrPostCallback

		Private BeginTransaction1OperationCompleted As System.Threading.SendOrPostCallback

		Private CommitTransactionOperationCompleted As System.Threading.SendOrPostCallback

		Private RollbackTransactionOperationCompleted As System.Threading.SendOrPostCallback

		Private GetSavePointNameOperationCompleted As System.Threading.SendOrPostCallback

		Private TransactionExistsOperationCompleted As System.Threading.SendOrPostCallback

		Private ExecuteDatasetOperationCompleted As System.Threading.SendOrPostCallback

		Private ExecuteNonQueryOperationCompleted As System.Threading.SendOrPostCallback

		Private ExecuteScalarOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDatatableSchemaOperationCompleted As System.Threading.SendOrPostCallback

		Private useDefaultCredentialsSetExplicitly As Boolean

		'''<remarks/>
		Public Sub New(ByVal pUrl As String)
			MyBase.New()
			Me.Url = pUrl
			If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
				Me.UseDefaultCredentials = True
				Me.useDefaultCredentialsSetExplicitly = False
			Else
				Me.useDefaultCredentialsSetExplicitly = True
			End If
		End Sub

		Public Shadows Property Url() As String
			Get
				Return MyBase.Url
			End Get
			Set(value As String)
				If (((Me.IsLocalFileSystemWebService(MyBase.Url) = True) _
				 AndAlso (Me.useDefaultCredentialsSetExplicitly = False)) _
				 AndAlso (Me.IsLocalFileSystemWebService(value) = False)) Then
					MyBase.UseDefaultCredentials = False
				End If
				MyBase.Url = value
			End Set
		End Property

		Public Shadows Property UseDefaultCredentials() As Boolean
			Get
				Return MyBase.UseDefaultCredentials
			End Get
			Set(value As Boolean)
				MyBase.UseDefaultCredentials = value
				Me.useDefaultCredentialsSetExplicitly = True
			End Set
		End Property

		'''<remarks/>
		Public Event CloseIDBConnectionCompleted As CloseIDBConnectionCompletedEventHandler

		'''<remarks/>
		Public Event ClearIDBConnectionCompleted As ClearIDBConnectionCompletedEventHandler

		'''<remarks/>
		Public Event DisposeIDBConnectionCompleted As DisposeIDBConnectionCompletedEventHandler

		'''<remarks/>
		Public Event GetIDBConnectionKeyCompleted As GetIDBConnectionKeyCompletedEventHandler

		'''<remarks/>
		Public Event GetSQLParametersCompleted As GetSQLParametersCompletedEventHandler

		'''<remarks/>
		Public Event BeginTransaction0Completed As BeginTransaction0CompletedEventHandler

		'''<remarks/>
		Public Event BeginTransaction1Completed As BeginTransaction1CompletedEventHandler

		'''<remarks/>
		Public Event CommitTransactionCompleted As CommitTransactionCompletedEventHandler

		'''<remarks/>
		Public Event RollbackTransactionCompleted As RollbackTransactionCompletedEventHandler

		'''<remarks/>
		Public Event GetSavePointNameCompleted As GetSavePointNameCompletedEventHandler

		'''<remarks/>
		Public Event TransactionExistsCompleted As TransactionExistsCompletedEventHandler

		'''<remarks/>
		Public Event ExecuteDatasetCompleted As ExecuteDatasetCompletedEventHandler

		'''<remarks/>
		Public Event ExecuteNonQueryCompleted As ExecuteNonQueryCompletedEventHandler

		'''<remarks/>
		Public Event ExecuteScalarCompleted As ExecuteScalarCompletedEventHandler

		'''<remarks/>
		Public Event GetDatatableSchemaCompleted As GetDatatableSchemaCompletedEventHandler

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/CloseIDBConnection", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub CloseIDBConnection()
			Me.Invoke("CloseIDBConnection", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub CloseIDBConnectionAsync()
			Me.CloseIDBConnectionAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CloseIDBConnectionAsync(ByVal userState As Object)
			If (Me.CloseIDBConnectionOperationCompleted Is Nothing) Then
				Me.CloseIDBConnectionOperationCompleted = AddressOf Me.OnCloseIDBConnectionOperationCompleted
			End If
			Me.InvokeAsync("CloseIDBConnection", New Object(-1) {}, Me.CloseIDBConnectionOperationCompleted, userState)
		End Sub

		Private Sub OnCloseIDBConnectionOperationCompleted(ByVal arg As Object)
			If (Not (Me.CloseIDBConnectionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CloseIDBConnectionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/ClearIDBConnection", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub ClearIDBConnection()
			Me.Invoke("ClearIDBConnection", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearIDBConnectionAsync()
			Me.ClearIDBConnectionAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearIDBConnectionAsync(ByVal userState As Object)
			If (Me.ClearIDBConnectionOperationCompleted Is Nothing) Then
				Me.ClearIDBConnectionOperationCompleted = AddressOf Me.OnClearIDBConnectionOperationCompleted
			End If
			Me.InvokeAsync("ClearIDBConnection", New Object(-1) {}, Me.ClearIDBConnectionOperationCompleted, userState)
		End Sub

		Private Sub OnClearIDBConnectionOperationCompleted(ByVal arg As Object)
			If (Not (Me.ClearIDBConnectionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ClearIDBConnectionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/DisposeIDBConnection", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub DisposeIDBConnection()
			Me.Invoke("DisposeIDBConnection", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub DisposeIDBConnectionAsync()
			Me.DisposeIDBConnectionAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DisposeIDBConnectionAsync(ByVal userState As Object)
			If (Me.DisposeIDBConnectionOperationCompleted Is Nothing) Then
				Me.DisposeIDBConnectionOperationCompleted = AddressOf Me.OnDisposeIDBConnectionOperationCompleted
			End If
			Me.InvokeAsync("DisposeIDBConnection", New Object(-1) {}, Me.DisposeIDBConnectionOperationCompleted, userState)
		End Sub

		Private Sub OnDisposeIDBConnectionOperationCompleted(ByVal arg As Object)
			If (Not (Me.DisposeIDBConnectionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DisposeIDBConnectionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/GetIDBConnectionKey", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function GetIDBConnectionKey() As String
			Dim results() As Object = Me.Invoke("GetIDBConnectionKey", New Object(-1) {})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetIDBConnectionKeyAsync()
			Me.GetIDBConnectionKeyAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetIDBConnectionKeyAsync(ByVal userState As Object)
			If (Me.GetIDBConnectionKeyOperationCompleted Is Nothing) Then
				Me.GetIDBConnectionKeyOperationCompleted = AddressOf Me.OnGetIDBConnectionKeyOperationCompleted
			End If
			Me.InvokeAsync("GetIDBConnectionKey", New Object(-1) {}, Me.GetIDBConnectionKeyOperationCompleted, userState)
		End Sub

		Private Sub OnGetIDBConnectionKeyOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetIDBConnectionKeyCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetIDBConnectionKeyCompleted(Me, New GetIDBConnectionKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/GetSQLParameters", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function GetSQLParameters(ByVal pProcedureName As String) As SqlClient.SqlParameter()
			Dim results() As Object = Me.Invoke("GetSQLParameters", New Object() {pProcedureName})
			Return CType(results(0), SqlClient.SqlParameter())
		End Function

		'''<remarks/>
		Public Overloads Sub GetSQLParametersAsync(ByVal pProcedureName As String)
			Me.GetSQLParametersAsync(pProcedureName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetSQLParametersAsync(ByVal pProcedureName As String, ByVal userState As Object)
			If (Me.GetSQLParametersOperationCompleted Is Nothing) Then
				Me.GetSQLParametersOperationCompleted = AddressOf Me.OnGetSQLParametersOperationCompleted
			End If
			Me.InvokeAsync("GetSQLParameters", New Object() {pProcedureName}, Me.GetSQLParametersOperationCompleted, userState)
		End Sub

		Private Sub OnGetSQLParametersOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetSQLParametersCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetSQLParametersCompleted(Me, New GetSQLParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/BeginTransaction0", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub BeginTransaction0()
			Me.Invoke("BeginTransaction0", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub BeginTransaction0Async()
			Me.BeginTransaction0Async(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub BeginTransaction0Async(ByVal userState As Object)
			If (Me.BeginTransaction0OperationCompleted Is Nothing) Then
				Me.BeginTransaction0OperationCompleted = AddressOf Me.OnBeginTransaction0OperationCompleted
			End If
			Me.InvokeAsync("BeginTransaction0", New Object(-1) {}, Me.BeginTransaction0OperationCompleted, userState)
		End Sub

		Private Sub OnBeginTransaction0OperationCompleted(ByVal arg As Object)
			If (Not (Me.BeginTransaction0CompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent BeginTransaction0Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/BeginTransaction1", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub BeginTransaction1(ByVal pIsolationLevel As IsolationLevel)
			Me.Invoke("BeginTransaction1", New Object() {pIsolationLevel})
		End Sub

		'''<remarks/>
		Public Overloads Sub BeginTransaction1Async(ByVal pIsolationLevel As IsolationLevel)
			Me.BeginTransaction1Async(pIsolationLevel, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub BeginTransaction1Async(ByVal pIsolationLevel As IsolationLevel, ByVal userState As Object)
			If (Me.BeginTransaction1OperationCompleted Is Nothing) Then
				Me.BeginTransaction1OperationCompleted = AddressOf Me.OnBeginTransaction1OperationCompleted
			End If
			Me.InvokeAsync("BeginTransaction1", New Object() {pIsolationLevel}, Me.BeginTransaction1OperationCompleted, userState)
		End Sub

		Private Sub OnBeginTransaction1OperationCompleted(ByVal arg As Object)
			If (Not (Me.BeginTransaction1CompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent BeginTransaction1Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/CommitTransaction", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub CommitTransaction()
			Me.Invoke("CommitTransaction", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub CommitTransactionAsync()
			Me.CommitTransactionAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CommitTransactionAsync(ByVal userState As Object)
			If (Me.CommitTransactionOperationCompleted Is Nothing) Then
				Me.CommitTransactionOperationCompleted = AddressOf Me.OnCommitTransactionOperationCompleted
			End If
			Me.InvokeAsync("CommitTransaction", New Object(-1) {}, Me.CommitTransactionOperationCompleted, userState)
		End Sub

		Private Sub OnCommitTransactionOperationCompleted(ByVal arg As Object)
			If (Not (Me.CommitTransactionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CommitTransactionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/RollbackTransaction", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Sub RollbackTransaction()
			Me.Invoke("RollbackTransaction", New Object(-1) {})
		End Sub

		'''<remarks/>
		Public Overloads Sub RollbackTransactionAsync()
			Me.RollbackTransactionAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RollbackTransactionAsync(ByVal userState As Object)
			If (Me.RollbackTransactionOperationCompleted Is Nothing) Then
				Me.RollbackTransactionOperationCompleted = AddressOf Me.OnRollbackTransactionOperationCompleted
			End If
			Me.InvokeAsync("RollbackTransaction", New Object(-1) {}, Me.RollbackTransactionOperationCompleted, userState)
		End Sub

		Private Sub OnRollbackTransactionOperationCompleted(ByVal arg As Object)
			If (Not (Me.RollbackTransactionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RollbackTransactionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/GetSavePointName", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function GetSavePointName() As String
			Dim results() As Object = Me.Invoke("GetSavePointName", New Object(-1) {})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetSavePointNameAsync()
			Me.GetSavePointNameAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetSavePointNameAsync(ByVal userState As Object)
			If (Me.GetSavePointNameOperationCompleted Is Nothing) Then
				Me.GetSavePointNameOperationCompleted = AddressOf Me.OnGetSavePointNameOperationCompleted
			End If
			Me.InvokeAsync("GetSavePointName", New Object(-1) {}, Me.GetSavePointNameOperationCompleted, userState)
		End Sub

		Private Sub OnGetSavePointNameOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetSavePointNameCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetSavePointNameCompleted(Me, New GetSavePointNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/TransactionExists", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function TransactionExists() As Boolean
			Dim results() As Object = Me.Invoke("TransactionExists", New Object(-1) {})
			Return CType(results(0), Boolean)
		End Function

		'''<remarks/>
		Public Overloads Sub TransactionExistsAsync()
			Me.TransactionExistsAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub TransactionExistsAsync(ByVal userState As Object)
			If (Me.TransactionExistsOperationCompleted Is Nothing) Then
				Me.TransactionExistsOperationCompleted = AddressOf Me.OnTransactionExistsOperationCompleted
			End If
			Me.InvokeAsync("TransactionExists", New Object(-1) {}, Me.TransactionExistsOperationCompleted, userState)
		End Sub

		Private Sub OnTransactionExistsOperationCompleted(ByVal arg As Object)
			If (Not (Me.TransactionExistsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent TransactionExistsCompleted(Me, New TransactionExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/ExecuteDataset", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function ExecuteDataset(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection) As System.Data.DataSet
			Dim results() As Object = Me.Invoke("ExecuteDataset", New Object() {pCommandType, pCommandText, pParameterCollection})
			Return CType(results(0), System.Data.DataSet)
		End Function

		'''<remarks/>
		Public Overloads Sub ExecuteDatasetAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection)
			Me.ExecuteDatasetAsync(pCommandType, pCommandText, pParameterCollection, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ExecuteDatasetAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection, ByVal userState As Object)
			If (Me.ExecuteDatasetOperationCompleted Is Nothing) Then
				Me.ExecuteDatasetOperationCompleted = AddressOf Me.OnExecuteDatasetOperationCompleted
			End If
			Me.InvokeAsync("ExecuteDataset", New Object() {pCommandType, pCommandText, pParameterCollection}, Me.ExecuteDatasetOperationCompleted, userState)
		End Sub

		Private Sub OnExecuteDatasetOperationCompleted(ByVal arg As Object)
			If (Not (Me.ExecuteDatasetCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ExecuteDatasetCompleted(Me, New ExecuteDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/ExecuteNonQuery", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function ExecuteNonQuery(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection) As Integer
			Dim results() As Object = Me.Invoke("ExecuteNonQuery", New Object() {pCommandType, pCommandText, pParameterCollection})
			Return CType(results(0), Integer)
		End Function

		'''<remarks/>
		Public Overloads Sub ExecuteNonQueryAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection)
			Me.ExecuteNonQueryAsync(pCommandType, pCommandText, pParameterCollection, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ExecuteNonQueryAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection, ByVal userState As Object)
			If (Me.ExecuteNonQueryOperationCompleted Is Nothing) Then
				Me.ExecuteNonQueryOperationCompleted = AddressOf Me.OnExecuteNonQueryOperationCompleted
			End If
			Me.InvokeAsync("ExecuteNonQuery", New Object() {pCommandType, pCommandText, pParameterCollection}, Me.ExecuteNonQueryOperationCompleted, userState)
		End Sub

		Private Sub OnExecuteNonQueryOperationCompleted(ByVal arg As Object)
			If (Not (Me.ExecuteNonQueryCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ExecuteNonQueryCompleted(Me, New ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/ExecuteScalar", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function ExecuteScalar(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As Orm.ParameterCollection) As String
			Dim results() As Object = Me.Invoke("ExecuteScalar", New Object() {pCommandType, pCommandText, pParameterCollection})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ExecuteScalarAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection)
			Me.ExecuteScalarAsync(pCommandType, pCommandText, pParameterCollection, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ExecuteScalarAsync(ByVal pCommandType As CommandType, ByVal pCommandText As String, ByVal pParameterCollection As ORM.ParameterCollection, ByVal userState As Object)
			If (Me.ExecuteScalarOperationCompleted Is Nothing) Then
				Me.ExecuteScalarOperationCompleted = AddressOf Me.OnExecuteScalarOperationCompleted
			End If
			Me.InvokeAsync("ExecuteScalar", New Object() {pCommandType, pCommandText, pParameterCollection}, Me.ExecuteScalarOperationCompleted, userState)
		End Sub

		Private Sub OnExecuteScalarOperationCompleted(ByVal arg As Object)
			If (Not (Me.ExecuteScalarCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ExecuteScalarCompleted(Me, New ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.civinext.com/GetDatatableSchema", RequestNamespace:="http://www.civinext.com/", ResponseNamespace:="http://www.civinext.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
		Public Function GetDatatableSchema(ByVal pTableName As String) As System.Data.DataTable
			Dim results() As Object = Me.Invoke("GetDatatableSchema", New Object() {pTableName})
			Return CType(results(0), System.Data.DataTable)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDatatableSchemaAsync(ByVal pTableName As String)
			Me.GetDatatableSchemaAsync(pTableName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDatatableSchemaAsync(ByVal pTableName As String, ByVal userState As Object)
			If (Me.GetDatatableSchemaOperationCompleted Is Nothing) Then
				Me.GetDatatableSchemaOperationCompleted = AddressOf Me.OnGetDatatableSchemaOperationCompleted
			End If
			Me.InvokeAsync("GetDatatableSchema", New Object() {pTableName}, Me.GetDatatableSchemaOperationCompleted, userState)
		End Sub

		Private Sub OnGetDatatableSchemaOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDatatableSchemaCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDatatableSchemaCompleted(Me, New GetDatatableSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		Public Shadows Sub CancelAsync(ByVal userState As Object)
			MyBase.CancelAsync(userState)
		End Sub

		Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
			If ((url Is Nothing) _
			 OrElse (url Is String.Empty)) Then
				Return False
			End If
			Dim wsUri As System.Uri = New System.Uri(url)
			If ((wsUri.Port >= 1024) _
			 AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
				Return True
			End If
			Return False
		End Function
	End Class


	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub CloseIDBConnectionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub ClearIDBConnectionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub DisposeIDBConnectionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub GetIDBConnectionKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDBConnectionKeyCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class GetIDBConnectionKeyCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub GetSQLParametersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSQLParametersCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class GetSQLParametersCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As SqlClient.SqlParameter()
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), SqlClient.SqlParameter())
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub BeginTransaction0CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub BeginTransaction1CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub CommitTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub RollbackTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub GetSavePointNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetSavePointNameCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class GetSavePointNameCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub TransactionExistsCompletedEventHandler(ByVal sender As Object, ByVal e As TransactionExistsCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class TransactionExistsCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As Boolean
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), Boolean)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub ExecuteDatasetCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteDatasetCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class ExecuteDatasetCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As System.Data.DataSet
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), System.Data.DataSet)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub ExecuteNonQueryCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteNonQueryCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class ExecuteNonQueryCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As Integer
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), Integer)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub ExecuteScalarCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteScalarCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class ExecuteScalarCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As Integer
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), Integer)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")> _
	Public Delegate Sub GetDatatableSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatatableSchemaCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), _
	 System.Diagnostics.DebuggerStepThroughAttribute(), _
	 System.ComponentModel.DesignerCategoryAttribute("code")> _
	Partial Public Class GetDatatableSchemaCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As System.Data.DataTable
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), System.Data.DataTable)
			End Get
		End Property
	End Class
End Namespace
